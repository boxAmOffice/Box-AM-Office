// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using boxAmOffice.Models;

namespace Box_AM_Ofice.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220720182056_UpdateData")]
    partial class UpdateData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Box_AM_Ofice.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "a18be9c0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f2d658b8-7fd3-4107-a410-ef0793859200",
                            Email = "Administrator@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "Administrator@gmail.com",
                            NormalizedUserName = "Administrator",
                            PasswordHash = "AQAAAAEAACcQAAAAEGMov0pI4ZIfjA6OLFa5DWk0tQwisIojeTEHQtDjIX78zRE/rytTQjXw+9katkeiJQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Administrator"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "ad376a8f",
                            ConcurrencyStamp = "0e30846f-5865-46ec-8dd1-539a46de6105",
                            Name = "Administrator",
                            NormalizedName = "Administrator"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "a18be9c0",
                            RoleId = "ad376a8f"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("boxAmOffice.Models.Actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProfilePictureURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Actors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bio = "Is an American actor and comedian",
                            FullName = "Steven John",
                            ProfilePictureURL = "https://sultan.blob.core.windows.net/attac/StevenJohn.jpg"
                        },
                        new
                        {
                            Id = 2,
                            Bio = "Is an Belgian actor",
                            FullName = "Van Damme",
                            ProfilePictureURL = "https://sultan.blob.core.windows.net/attac/Van_Damme.jpg"
                        },
                        new
                        {
                            Id = 3,
                            Bio = "Is an American actress and singer",
                            FullName = "Taraji Penda Henson",
                            ProfilePictureURL = "https://sultan.blob.core.windows.net/attac/Taraji_Henson.jpg"
                        },
                        new
                        {
                            Id = 4,
                            Bio = "Kristina Asmus was born Kristina Igorevna Myasnikova on April 14, 1988, in Kaliningrad",
                            FullName = "Kristina Asmus",
                            ProfilePictureURL = "https://sultan.blob.core.windows.net/attac/Kristina_Asmus.jpg"
                        },
                        new
                        {
                            Id = 5,
                            Bio = "alil Asretov was born on February 26, 1994 in Makhachkala, Republic of Dagestan, Russia.",
                            FullName = "Jalil Asretov",
                            ProfilePictureURL = "https://sultan.blob.core.windows.net/attac/Jalil_Asretov.png"
                        },
                        new
                        {
                            Id = 6,
                            Bio = "Sergey Borisov was born on April 4, 1975 in the USSR. He is an actor",
                            FullName = "Sergey Borisov",
                            ProfilePictureURL = "https://sultan.blob.core.windows.net/attac/Sergey_Borisov.png"
                        },
                        new
                        {
                            Id = 7,
                            Bio = "Thomas Cruise Mapother IV(born July 3, 1962) is an American actor and producer.One of the world's highest-paid actors,[1] he has received various accolades.",
                            FullName = "Thomas Cruise",
                            ProfilePictureURL = "https://sultan.blob.core.windows.net/attac/Tom-Cruise.jpg"
                        },
                        new
                        {
                            Id = 8,
                            Bio = "Irving Rameses Ving Rhames is an American actor. He is best known for his starring role as IMF Agent Luther Stickell in the Mission: Impossible film series and his supporting role as gang kingpin Marsellus Wallace in Pulp Fiction",
                            FullName = "Irving Rameses",
                            ProfilePictureURL = "https://sultan.blob.core.windows.net/attac/Irving-Rameses.jpg"
                        },
                        new
                        {
                            Id = 9,
                            Bio = "Jeffrey Lynn Goldblum (/ˈɡoʊldbluːm/; born October 22, 1952) is an American actor and musician. He has starred in some of the highest-grossing films of his era, such as Jurassic Park (1993) and Independence Day (1996), as well as their sequels.",
                            FullName = "Jeff Goldblum",
                            ProfilePictureURL = "https://sultan.blob.core.windows.net/attac/Jeff-Goldblum.jpg"
                        },
                        new
                        {
                            Id = 10,
                            Bio = "Sam Neill was born in Omagh, Co. Tyrone, Northern Ireland, to army parents, an English-born mother, Priscilla Beatrice (Ingham), and a New Zealand-born father, Dermot Neill.",
                            FullName = "Sam Neill",
                            ProfilePictureURL = "https://sultan.blob.core.windows.net/attac/Sam-Neill.jpg"
                        },
                        new
                        {
                            Id = 11,
                            Bio = "Steven Allan Spielberg (/ˈspiːlbɜːrɡ/; born December 18, 1946) is an American film director, producer, and screenwriter.[1] A figure of the New Hollywood era, he is the most commercially successful director of all time. ",
                            FullName = "Steven Spielberg",
                            ProfilePictureURL = "https://sultan.blob.core.windows.net/attac/Steven-Spielberg.jpg"
                        },
                        new
                        {
                            Id = 12,
                            Bio = "Thomas Jeffrey Hanks was born in Concord, California, to Janet Marylyn (Frager), a hospital worker, and Amos Mefford Hanks, an itinerant cook. His mother's family, originally surnamed Fraga, was entirely Portuguese, while his father was of mostly English ancestry.",
                            FullName = "Tom Hanks",
                            ProfilePictureURL = "https://sultan.blob.core.windows.net/attac/Tom-Hanks.jpg"
                        },
                        new
                        {
                            Id = 13,
                            Bio = "Timothy Allen Dick was born on June 13, 1953, in Denver, Colorado, to Martha Katherine (Fox) and Gerald M. Dick. ",
                            FullName = "Tim Allen (I)",
                            ProfilePictureURL = "https://sultan.blob.core.windows.net/attac/Tim-Allen.jpg"
                        },
                        new
                        {
                            Id = 14,
                            Bio = "Simu Liu (/ˈsimu ˈlijuː/ SEE-moo LEE-ew;[2] Chinese: 刘思慕; born 19 April 1989) is a Canadian actor, author, and stuntman. He is known for portraying Shang-Chi in the 2021 Marvel Cinematic Universe film Shang-Chi and the Legend of the Ten Rings..",
                            FullName = "Simu iu",
                            ProfilePictureURL = "https://sultan.blob.core.windows.net/attac/Simu-iu.jpg"
                        },
                        new
                        {
                            Id = 15,
                            Bio = "Tony Leung Chiu-wai (Chinese: 梁朝偉, born 27 June 1962) is a Hong Kong actor and singer. He is one of Asia's most successful and internationally recognized actors, and was named as Small Tiger among the Five Tiger Generals of TVB.",
                            FullName = "Tony Leung Chiu-wai",
                            ProfilePictureURL = "https://sultan.blob.core.windows.net/attac/Tony-Leung-Chiu-wai.jpg"
                        },
                        new
                        {
                            Id = 16,
                            Bio = "Christopher Hemsworth AM is an Australian actor. He rose to prominence playing Kim Hyde in the Australian television series Home and Away before beginning a film career in Hollywood.",
                            FullName = "Chris Hemsworth",
                            ProfilePictureURL = "https://sultan.blob.core.windows.net/attac/Chris-Hemsworth.jpg"
                        },
                        new
                        {
                            Id = 17,
                            Bio = "Taika David Cohen ONZM, known professionally as Taika Waititi, is a New Zealand filmmaker, actor, and comedian. He is a recipient of an Academy Award, a BAFTA Award, and a Grammy Award, and has received two nominations at the Primetime Emmy Awards.",
                            FullName = "Taika Waititi",
                            ProfilePictureURL = "https://sultan.blob.core.windows.net/attac/Taika-Waititi.jpg"
                        });
                });

            modelBuilder.Entity("boxAmOffice.Models.Actor_Movie", b =>
                {
                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("ActorId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("Actors_Movies");

                    b.HasData(
                        new
                        {
                            ActorId = 1,
                            MovieId = 2
                        },
                        new
                        {
                            ActorId = 2,
                            MovieId = 2
                        },
                        new
                        {
                            ActorId = 3,
                            MovieId = 2
                        },
                        new
                        {
                            ActorId = 4,
                            MovieId = 3
                        },
                        new
                        {
                            ActorId = 5,
                            MovieId = 3
                        },
                        new
                        {
                            ActorId = 6,
                            MovieId = 3
                        },
                        new
                        {
                            ActorId = 7,
                            MovieId = 5
                        },
                        new
                        {
                            ActorId = 8,
                            MovieId = 5
                        },
                        new
                        {
                            ActorId = 9,
                            MovieId = 6
                        },
                        new
                        {
                            ActorId = 10,
                            MovieId = 6
                        },
                        new
                        {
                            ActorId = 10,
                            MovieId = 7
                        },
                        new
                        {
                            ActorId = 11,
                            MovieId = 7
                        },
                        new
                        {
                            ActorId = 12,
                            MovieId = 8
                        },
                        new
                        {
                            ActorId = 13,
                            MovieId = 8
                        },
                        new
                        {
                            ActorId = 14,
                            MovieId = 9
                        },
                        new
                        {
                            ActorId = 15,
                            MovieId = 9
                        },
                        new
                        {
                            ActorId = 16,
                            MovieId = 10
                        },
                        new
                        {
                            ActorId = 17,
                            MovieId = 10
                        });
                });

            modelBuilder.Entity("boxAmOffice.Models.Cinema", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cinemas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "TAJ Cinemas is the first to introduce the latest in high-tech services to movie-goers such as an online ticketing function to avoid queues",
                            Logo = "https://sultan.blob.core.windows.net/attac/Taj.png",
                            Name = "Taj Cinemas"
                        },
                        new
                        {
                            Id = 2,
                            Description = "The focus of Prime Cinemas is all about our guests and the convenience for local people – this is YOUR local neighborhood cinema!",
                            Logo = "https://sultan.blob.core.windows.net/attac/Prime.png",
                            Name = "Prime Cinemas Abdali"
                        },
                        new
                        {
                            Id = 3,
                            Description = "The focus of Prime Cinemas is all about our guests and the convenience for local people – this is YOUR local neighborhood cinema!",
                            Logo = "https://sultan.blob.core.windows.net/attac/Prime.png",
                            Name = "Prime Cinemas Irbid"
                        });
                });

            modelBuilder.Entity("boxAmOffice.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CinemaId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MovieCategory")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProducerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CinemaId");

                    b.HasIndex("ProducerId");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CinemaId = 1,
                            Description = "This is the Life movie description",
                            EndDate = new DateTime(2022, 7, 30, 21, 20, 54, 563, DateTimeKind.Local).AddTicks(1551),
                            ImageURL = "https://sultan.blob.core.windows.net/attac/life.jpg",
                            MovieCategory = 4,
                            Name = "Life",
                            Price = 39.5,
                            ProducerId = 1,
                            StartDate = new DateTime(2022, 7, 10, 21, 20, 54, 557, DateTimeKind.Local).AddTicks(724)
                        },
                        new
                        {
                            Id = 2,
                            CinemaId = 2,
                            Description = "The untold story of one twelve-year-old's dream to become the world's greatest supervillain.",
                            EndDate = new DateTime(2022, 7, 30, 21, 20, 54, 563, DateTimeKind.Local).AddTicks(3605),
                            ImageURL = "https://sultan.blob.core.windows.net/attac/Minions.jpg",
                            MovieCategory = 2,
                            Name = "Minions: The Rise of Gru",
                            Price = 25.989999999999998,
                            ProducerId = 1,
                            StartDate = new DateTime(2022, 7, 10, 21, 20, 54, 563, DateTimeKind.Local).AddTicks(3582)
                        },
                        new
                        {
                            Id = 3,
                            CinemaId = 3,
                            Description = "Ivan sets off on a dangerous mission into Syria to save his ex-commander Grey after his capture by ISIS. With the help of U.S. military patrols, he succeeds in freeing Grey and attempts to escape the country while being hunted by terrorists.",
                            EndDate = new DateTime(2022, 7, 30, 21, 20, 54, 563, DateTimeKind.Local).AddTicks(3618),
                            ImageURL = "https://sultan.blob.core.windows.net/attac/Infiltration.png",
                            MovieCategory = 1,
                            Name = "Infiltration",
                            Price = 29.989999999999998,
                            ProducerId = 2,
                            StartDate = new DateTime(2022, 7, 10, 21, 20, 54, 563, DateTimeKind.Local).AddTicks(3613)
                        },
                        new
                        {
                            Id = 4,
                            CinemaId = 3,
                            Description = "A bookish marmoset embarks on a wild adventure to travel around the planet in 80 days after accepting a challenge from a greedy frog.",
                            EndDate = new DateTime(2022, 7, 30, 21, 20, 54, 563, DateTimeKind.Local).AddTicks(3628),
                            ImageURL = "https://sultan.blob.core.windows.net/attac/Around-the-World-in-80-Days.jpg",
                            MovieCategory = 1,
                            Name = "Around the World in 80 Days",
                            Price = 22.989999999999998,
                            ProducerId = 2,
                            StartDate = new DateTime(2022, 7, 10, 21, 20, 54, 563, DateTimeKind.Local).AddTicks(3624)
                        },
                        new
                        {
                            Id = 5,
                            CinemaId = 3,
                            Description = "An American agent, under false suspicion of disloyalty, must discover and expose the real spy without the help of his organization.",
                            EndDate = new DateTime(2022, 7, 25, 21, 20, 54, 563, DateTimeKind.Local).AddTicks(3639),
                            ImageURL = "https://sultan.blob.core.windows.net/attac/Mission-Impossible.png",
                            MovieCategory = 1,
                            Name = "Mission: Impossible",
                            Price = 26.989999999999998,
                            ProducerId = 3,
                            StartDate = new DateTime(2022, 7, 15, 21, 20, 54, 563, DateTimeKind.Local).AddTicks(3634)
                        },
                        new
                        {
                            Id = 6,
                            CinemaId = 3,
                            Description = "Four years after the destruction of Isla Nublar, dinosaurs now live--and hunt--alongside humans all over the world.",
                            EndDate = new DateTime(2022, 7, 28, 21, 20, 54, 563, DateTimeKind.Local).AddTicks(3649),
                            ImageURL = "https://sultan.blob.core.windows.net/attac/Jurassic-World-Dominion.jpg",
                            MovieCategory = 1,
                            Name = "Jurassic World Dominion",
                            Price = 10.99,
                            ProducerId = 4,
                            StartDate = new DateTime(2022, 7, 13, 21, 20, 54, 563, DateTimeKind.Local).AddTicks(3644)
                        },
                        new
                        {
                            Id = 7,
                            CinemaId = 2,
                            Description = "A decidedly odd couple with ulterior motives convince Dr. Grant to go to Isla Sorna for a holiday, but their unexpected landing startles the island's new inhabitants..",
                            EndDate = new DateTime(2022, 7, 27, 21, 20, 54, 563, DateTimeKind.Local).AddTicks(3660),
                            ImageURL = "https://sultan.blob.core.windows.net/attac/Jurassic-Park-III.jpg",
                            MovieCategory = 1,
                            Name = "Jurassic Park III",
                            Price = 30.989999999999998,
                            ProducerId = 5,
                            StartDate = new DateTime(2022, 7, 18, 21, 20, 54, 563, DateTimeKind.Local).AddTicks(3655)
                        },
                        new
                        {
                            Id = 8,
                            CinemaId = 1,
                            Description = "A cowboy doll is profoundly threatened and jealous when a new spaceman action figure supplants him as top toy in a boy's bedroom.",
                            EndDate = new DateTime(2022, 8, 3, 21, 20, 54, 563, DateTimeKind.Local).AddTicks(3670),
                            ImageURL = "https://sultan.blob.core.windows.net/attac/Toy-Story.jpg",
                            MovieCategory = 2,
                            Name = "Toy Story",
                            Price = 10.99,
                            ProducerId = 6,
                            StartDate = new DateTime(2022, 7, 6, 21, 20, 54, 563, DateTimeKind.Local).AddTicks(3666)
                        },
                        new
                        {
                            Id = 9,
                            CinemaId = 1,
                            Description = "Shang-Chi, the master of weaponry-based Kung Fu, is forced to confront his past after being drawn into the Ten Rings organization..",
                            EndDate = new DateTime(2022, 8, 2, 21, 20, 54, 563, DateTimeKind.Local).AddTicks(3681),
                            ImageURL = "https://sultan.blob.core.windows.net/attac/Shang-Chi.jpg",
                            MovieCategory = 1,
                            Name = "Shang-Chi and the Legend of the Ten Rings",
                            Price = 25.989999999999998,
                            ProducerId = 7,
                            StartDate = new DateTime(2022, 7, 7, 21, 20, 54, 563, DateTimeKind.Local).AddTicks(3676)
                        },
                        new
                        {
                            Id = 10,
                            CinemaId = 2,
                            Description = "A bookish marmoset embarks on a wild adventure to travel around the planet in 80 days after accepting a challenge from a greedy frog.",
                            EndDate = new DateTime(2022, 8, 8, 21, 20, 54, 563, DateTimeKind.Local).AddTicks(3690),
                            ImageURL = "https://sultan.blob.core.windows.net/attac/Thor-Ragnarok.jpg",
                            MovieCategory = 1,
                            Name = "Thor: Ragnarok",
                            Price = 25.989999999999998,
                            ProducerId = 7,
                            StartDate = new DateTime(2022, 7, 1, 21, 20, 54, 563, DateTimeKind.Local).AddTicks(3686)
                        });
                });

            modelBuilder.Entity("boxAmOffice.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("boxAmOffice.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("boxAmOffice.Models.Producer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProfilePictureURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Producers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bio = "Kyle Balda is a BAFTA nominated feature animation director working in the industry for 30 years",
                            FullName = "Kyle Balda",
                            ProfilePictureURL = "https://sultan.blob.core.windows.net/attac/Kyle_Balda.jpg"
                        },
                        new
                        {
                            Id = 2,
                            Bio = "Aleksey Aleksandrovich Chadov was born on September 2, 1981, in Solntsevo, Moscow region, RSFSR, USSR, now a suburb of Moscow, Russia.",
                            FullName = "Aleksey Chadov",
                            ProfilePictureURL = "https://sultan.blob.core.windows.net/attac/Chadov_Aleksey.jpg"
                        },
                        new
                        {
                            Id = 3,
                            Bio = "Wagner was born Paula Sue Kauffman in Youngstown, Ohio. Her mother, Sue Anna (née Shofstall), was a news magazine editor from Oklahoma, and her father, Edmund Jamison Ned Kauffman, Jr., was a business owner.",
                            FullName = "Paula Wagner",
                            ProfilePictureURL = "https://sultan.blob.core.windows.net/attac/Paula-Wagner-Deauville.png"
                        },
                        new
                        {
                            Id = 4,
                            Bio = "Frank Wilton Marshall (born September 13, 1946) is an American film producer and director. He often collaborates with his wife, film producer Kathleen Kennedy. ",
                            FullName = "Frank Marshall",
                            ProfilePictureURL = "https://sultan.blob.core.windows.net/attac/Frank-Marshall.jpg"
                        },
                        new
                        {
                            Id = 5,
                            Bio = "Larry Joseph Franco (born April 5, 1949) is an American film producer. He has also served as an actor, second unit director and assistant director.",
                            FullName = "Larry Franco",
                            ProfilePictureURL = "https://sultan.blob.core.windows.net/attac/Larry-Franco.jpg"
                        },
                        new
                        {
                            Id = 6,
                            Bio = "Ralph Guggenheim is an American video graphics designer and film producer. He won a Producers Guild of America Award in 1995 for his contributions to the film Toy Story..",
                            FullName = "Ralph Guggenheim",
                            ProfilePictureURL = "https://sultan.blob.core.windows.net/attac/Ralph-Guggenheim.jpg"
                        },
                        new
                        {
                            Id = 7,
                            Bio = "Kevin Feige is an American film and television producer who has been the president of Marvel Studios and the primary producer of the Marvel Cinematic Universe franchise since 2007.",
                            FullName = "Kevin Feige",
                            ProfilePictureURL = "https://sultan.blob.core.windows.net/attac/Kevin-Feige.jpg"
                        });
                });

            modelBuilder.Entity("boxAmOffice.Models.ShoppingCartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<string>("ShoppingCartId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("ShoppingCartItems");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Box_AM_Ofice.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Box_AM_Ofice.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Box_AM_Ofice.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Box_AM_Ofice.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("boxAmOffice.Models.Actor_Movie", b =>
                {
                    b.HasOne("boxAmOffice.Models.Actor", "Actor")
                        .WithMany("Actors_Movies")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("boxAmOffice.Models.Movie", "Movie")
                        .WithMany("Actors_Movies")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("boxAmOffice.Models.Movie", b =>
                {
                    b.HasOne("boxAmOffice.Models.Cinema", "Cinema")
                        .WithMany("Movies")
                        .HasForeignKey("CinemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("boxAmOffice.Models.Producer", "Producer")
                        .WithMany("Movies")
                        .HasForeignKey("ProducerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cinema");

                    b.Navigation("Producer");
                });

            modelBuilder.Entity("boxAmOffice.Models.Order", b =>
                {
                    b.HasOne("Box_AM_Ofice.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("boxAmOffice.Models.OrderItem", b =>
                {
                    b.HasOne("boxAmOffice.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("boxAmOffice.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("boxAmOffice.Models.ShoppingCartItem", b =>
                {
                    b.HasOne("boxAmOffice.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("boxAmOffice.Models.Actor", b =>
                {
                    b.Navigation("Actors_Movies");
                });

            modelBuilder.Entity("boxAmOffice.Models.Cinema", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("boxAmOffice.Models.Movie", b =>
                {
                    b.Navigation("Actors_Movies");
                });

            modelBuilder.Entity("boxAmOffice.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("boxAmOffice.Models.Producer", b =>
                {
                    b.Navigation("Movies");
                });
#pragma warning restore 612, 618
        }
    }
}
